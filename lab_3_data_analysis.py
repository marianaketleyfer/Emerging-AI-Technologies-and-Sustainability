# -*- coding: utf-8 -*-
"""Lab 3 - Data Analysis.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1hDfZfSZZtx54Op75gBTuzuUZkO0zHWim
"""

import pandas as pd
import matplotlib . pyplot as plt
# Load the data
data = pd . read_csv ("product_data.csv", parse_dates =["Date"])

# Plot production , sales , and price over time
plt . figure ( figsize =(16 , 6) )

plt . subplot (4 , 1 , 1)
plt . plot ( data ["Date"] , data ["Production"] , label ="Production")
plt . legend ()
plt . subplot (4 , 1 , 2)
plt . plot ( data ["Date"] , data ["Sales"] , label ="Sales", color ="orange")
plt . legend ()

plt . subplot (4 , 1 , 3)
plt . plot ( data ["Date"] , data ["Price"] , label ="Price", color ="green")
plt . legend ()

plt . subplot (4 , 1 , 4)
plt . plot ( data ["Date"] , data ["Population"] , label ="Population", color ="red")
plt . legend ()

plt . tight_layout ()
plt . show ()

import seaborn as sns

# Correlation matrix
corr_matrix = data [["Production", "Sales", "Price", "Population"]]. corr ()
sns . heatmap ( corr_matrix , annot = True , cmap ="coolwarm")
plt . title ("Correlation Matrix")
plt . show ()

import statsmodels . api as sm

# Linear regression : Units Sold vs Manufacturing Rates
X = sm . add_constant ( data ["Production"])
Y = data ["Sales"]
model = sm . OLS (Y , X ) . fit ()
predictions = model . predict ( X )

print ( model . summary () )

# Scatter plot with regression line
plt . figure ( figsize =(14 , 7) )
plt . scatter ( data ["Production"] , data ["Sales"] , label ="Data Points")
plt . plot ( data ["Production"] , predictions , color ="red", label ="RegressionLine")
plt . xlabel (" Manufacturing Rates")
plt . ylabel ("Units Sold")
plt . title ("Linear Regression : Units Sold vs Manufacturing Rates")
plt . legend ()
plt . show ()

# Linear regression : Units Sold vs All Other Features

X = sm . add_constant ( data [["Production", "Price", "Population"]])
Y = data ["Sales"]
model = sm . OLS (Y , X ) . fit ()
predictions = model . predict ( X )

print ( model . summary () )

import statsmodels . formula . api as smf

# Load the data
data = pd . read_csv ("product_data.csv", parse_dates =["Date"])

# Add dummy variables for pre and post treatment periods for each news event

data ["Post_Economic_Downturn"] = data ["Date"]. apply ( lambda x : 1 if x >= pd . Timestamp ("2015 -03 -01") else 0)
data ["Post_Raw_Material_Shortage"] = data ["Date"]. apply ( lambda x : 1 if x >= pd . Timestamp ("2016 -07 -01") else 0)
data ["Post_Competing_Product"] = data ["Date"]. apply ( lambda x : 1 if x >= pd . Timestamp ("2018 -01 -01") else 0)
data ["Post_Government_Subsidy"] = data ["Date"]. apply ( lambda x : 1 if x >= pd . Timestamp ("2019 -06 -01") else 0)

# Fit the Difference -in - Differences model
model = smf . ols ("Production ~ Post_Economic_Downturn + Post_Raw_Material_Shortage + Post_Competing_Product + Post_Government_Subsidy + Price + Population", data = data ). fit()

print ( model . summary () )

model = smf . ols ("Sales ~ Post_Economic_Downturn + Post_Raw_Material_Shortage + Post_Competing_Product + Post_Government_Subsidy + Price + Population", data = data ). fit()

print ( model . summary () )